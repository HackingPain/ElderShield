{"ast":null,"code":"import React from'react';import{createRoot}from'react-dom/client';import'./index.css';import App from'./App';// Get the root element\nimport{jsx as _jsx}from\"react/jsx-runtime\";const container=document.getElementById('root');const root=createRoot(container);// Render the app\nroot.render(/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(App,{})}));// Register service worker for PWA functionality\nif('serviceWorker'in navigator){window.addEventListener('load',()=>{navigator.serviceWorker.register('/sw.js').then(registration=>{console.log('ElderShield SW registered: ',registration);// Check for updates\nregistration.addEventListener('updatefound',()=>{const newWorker=registration.installing;newWorker.addEventListener('statechange',()=>{if(newWorker.state==='installed'&&navigator.serviceWorker.controller){// New version available\nconsole.log('New version available');if(window.confirm('A new version is available. Reload to update?')){window.location.reload();}}});});}).catch(registrationError=>{console.log('SW registration failed: ',registrationError);});});}","map":{"version":3,"names":["React","createRoot","App","jsx","_jsx","container","document","getElementById","root","render","StrictMode","children","navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","newWorker","installing","state","controller","confirm","location","reload","catch","registrationError"],"sources":["/app/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n// Get the root element\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\n// Render the app\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// Register service worker for PWA functionality\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('ElderShield SW registered: ', registration);\n        \n        // Check for updates\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          newWorker.addEventListener('statechange', () => {\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              // New version available\n              console.log('New version available');\n              if (window.confirm('A new version is available. Reload to update?')) {\n                window.location.reload();\n              }\n            }\n          });\n        });\n      })\n      .catch((registrationError) => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,UAAU,KAAQ,kBAAkB,CAC7C,MAAO,aAAa,CACpB,MAAO,CAAAC,GAAG,KAAM,OAAO,CAEvB;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,SAAS,CAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CACjD,KAAM,CAAAC,IAAI,CAAGP,UAAU,CAACI,SAAS,CAAC,CAElC;AACAG,IAAI,CAACC,MAAM,cACTL,IAAA,CAACJ,KAAK,CAACU,UAAU,EAAAC,QAAA,cACfP,IAAA,CAACF,GAAG,GAAE,CAAC,CACS,CACpB,CAAC,CAED;AACA,GAAI,eAAe,EAAI,CAAAU,SAAS,CAAE,CAChCC,MAAM,CAACC,gBAAgB,CAAC,MAAM,CAAE,IAAM,CACpCF,SAAS,CAACG,aAAa,CAACC,QAAQ,CAAC,QAAQ,CAAC,CACvCC,IAAI,CAAEC,YAAY,EAAK,CACtBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAEF,YAAY,CAAC,CAExD;AACAA,YAAY,CAACJ,gBAAgB,CAAC,aAAa,CAAE,IAAM,CACjD,KAAM,CAAAO,SAAS,CAAGH,YAAY,CAACI,UAAU,CACzCD,SAAS,CAACP,gBAAgB,CAAC,aAAa,CAAE,IAAM,CAC9C,GAAIO,SAAS,CAACE,KAAK,GAAK,WAAW,EAAIX,SAAS,CAACG,aAAa,CAACS,UAAU,CAAE,CACzE;AACAL,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACpC,GAAIP,MAAM,CAACY,OAAO,CAAC,+CAA+C,CAAC,CAAE,CACnEZ,MAAM,CAACa,QAAQ,CAACC,MAAM,CAAC,CAAC,CAC1B,CACF,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CAAC,CACDC,KAAK,CAAEC,iBAAiB,EAAK,CAC5BV,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAES,iBAAiB,CAAC,CAC5D,CAAC,CAAC,CACN,CAAC,CAAC,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}